---
title: "This site: design and hosting"
emoji: "ðŸš€"
date: "2023-09-02"
---

Welcome to my site!

This is a brief overview of it's design, how (and why) I decided to host it where I do, and how I built it.

### Design

This site is designed and build via [Astro](https://astro.build). If you haven't used it before, check it out! It's an amazing, no-JS-by-default (but you can add it if you want) site framework for building both static and server-side rendered sites.

My site is all static. Static sites can be significantly faster than server-side rendered sites, especially since they don't use a backend database. Astro allows me to author all of my content in Markdown (actually, [MarkDoc](https://markdoc.dev/), a similar alternative to Markdown), build it once, and then deploy it.

I use [TailwindCSS](https://tailwindcss.com/) and Tailwind's Typography feature for styling. If you haven't used it before, Tailwind is like Bootstrap but without the opinionated design. It allows specifying CSS attributes completely with classes, while still allowing fine-grained adjustment of styling and layout.

### Hosting

I thought about hosting this website through a service like Vercel, but decided against it. Vercel's pricing is quite expensive, and goes up very quickly the more bandwidth you consume. While they do have a free plan, I didn't want to risk overages or consuming too many build minutes.

Another alternative is Cloudflare Pages. Cloudflare Pages is completely free for static sites (unlimited bandwidth, unlimited requests!), supports server-side rendered sites with cheap pricing, and has built-in CI/CD. However, I wanted full customization of everything, and Cloudflare Pages can be opinionated at times. If you use a framework like Next.JS, or just want a site set up quickly and cheaply, I'd recommend [you check it out](https://pages.cloudflare.com) though.

Instead of a service like Vercel or Cloudflare, this site runs on... AWS Lambda! (cue the exclamations of shock)

Lambda is known for so-called "cold starts", where a container/VM/whatever AWS is using these days must be spun up from scratch when no requests have been seen for a while. However, I mitigate this with Rust.

Rust is known for it's speed, memory efficiency, and safety, although it is a tricky language to learn. In the cast of Lambda, Rust can cut a 500ms cold-start time down to a [20ms cold start time](https://maxday.github.io/lambda-perf/)! If you've used Lambda before, you know how remarkable this is.

I run the Lambda out of `us-east-1`. Cloudflare's CDN sits in front of it, providing caching, DDoS protection, and automatic TLS for my domain. Some dynamic portions of this site, like the contact form, are written in Rust, but otherwise the Lambda function mostly just serves static files.

Finally, for maximum performance, all of my site's files are baked into the Lambda during the build process using a Rust crate (library) called [`include_dir`](https://michael-f-bryan.github.io/include_dir/include_dir/index.html#). This eliminates a round-trip to a database or S3 bucket to fetch the files, and allows me to serve them directly from the Lambda's memory. While this does increase the binary size *slightly*, it's such a small amount that it doesn't matter.

If you like, you can check out the full code on [GitHub](https://github.com/isaac-mcfadyen/personal-site).

Until next time!